from testapp.models import Major, Test, Question
import importlib
import os
import sys

# them th∆∞ m·ª•c test_data v√†o path ƒë·ªÉ c√≥ th·ªÉ import
sys.path.append(os.path.join(os.path.dirname(__file__), 'test_data'))

def run():
    # 10 majors
    majors = [
        ("C√¥ng ngh·ªá th√¥ng tin", "D√†nh cho ng∆∞·ªùi c√≥ t∆∞ duy logic, y√™u th√≠ch c√¥ng ngh·ªá."),
        ("Kinh t·∫ø", "Ph√π h·ª£p v·ªõi ng∆∞·ªùi ph√¢n t√≠ch, th√≠ch t√†i ch√≠nh."),
        ("Marketing", "D√†nh cho ng∆∞·ªùi s√°ng t·∫°o v√† giao ti·∫øp t·ªët."),
        ("Ng√¥n ng·ªØ Anh", "Cho ng∆∞·ªùi y√™u ng√¥n ng·ªØ, th√≠ch giao ti·∫øp qu·ªëc t·∫ø."),
        ("Lu·∫≠t", "Ph√π h·ª£p v·ªõi ng∆∞·ªùi logic v√† c√¥ng b·∫±ng."),
        ("Y d∆∞·ª£c", "Cho ng∆∞·ªùi t·ªâ m·ªâ, y√™u gi√∫p ƒë·ª° ng∆∞·ªùi kh√°c."),
        ("S∆∞ ph·∫°m", "D√†nh cho ng∆∞·ªùi ki√™n nh·∫´n v√† y√™u gi√°o d·ª•c."),
        ("Ki·∫øn tr√∫c", "Cho ng∆∞·ªùi s√°ng t·∫°o v√† c√≥ √≥c th·∫©m m·ªπ."),
        ("Du l·ªãch & Nh√† h√†ng - Kh√°ch s·∫°n", "Cho ng∆∞·ªùi nƒÉng ƒë·ªông, th√≠ch kh√°m ph√°."),
        ("T√¢m l√Ω h·ªçc", "D√†nh cho ng∆∞·ªùi bi·∫øt l·∫Øng nghe v√† quan t√¢m con ng∆∞·ªùi.")
    ]

    # Ti√™u ƒë·ªÅ 3 b√†i test cho m·ªói chuy√™n ng√†nh (theo ch·ªß ƒëi·ªÉm ph√π h·ª£p)
    test_titles_by_major = {
        "C√¥ng ngh·ªá th√¥ng tin": [
            "K·ªπ nƒÉng Gi·∫£i quy·∫øt V·∫•n ƒë·ªÅ & T∆∞ duy Ph·∫£n bi·ªán",
            "K·ªπ nƒÉng Giao ti·∫øp & L√†m vi·ªác Nh√≥m", 
            "K·ªπ nƒÉng Qu·∫£n l√Ω Th·ªùi gian & H·ªçc h·ªèi Li√™n t·ª•c"
        ],
        "Kinh t·∫ø": [
            "Ph√¢n t√≠ch d·ªØ li·ªáu & T∆∞ duy chi·∫øn l∆∞·ª£c",
            "Giao ti·∫øp thuy·∫øt ph·ª•c & Tr√¨nh b√†y",
            "ƒê·∫°o ƒë·ª©c kinh doanh & Qu·∫£n tr·ªã r·ªßi ro"
        ],
        "Marketing": [
            "S√°ng t·∫°o √Ω t∆∞·ªüng & N·ªôi dung",
            "Nghi√™n c·ª©u th·ªã tr∆∞·ªùng & Insight",
            "Chi·∫øn l∆∞·ª£c truy·ªÅn th√¥ng t√≠ch h·ª£p"
        ],
        "Ng√¥n ng·ªØ Anh": [
            "Ng·ªØ ph√°p & T·ª´ v·ª±ng",
            "ƒê·ªçc hi·ªÉu & T∆∞ duy ph·∫£n bi·ªán",
            "Giao ti·∫øp & Vi·∫øt h·ªçc thu·∫≠t"
        ],
        "Lu·∫≠t": [
            "Nh·∫≠n ƒë·ªãnh ph√°p l√Ω & L·∫≠p lu·∫≠n",
            "Ph√¢n t√≠ch t√¨nh hu·ªëng & Quy ph·∫°m",
            "ƒê·∫°o ƒë·ª©c ngh·ªÅ lu·∫≠t & T·ªë t·ª•ng"
        ],
        "Y d∆∞·ª£c": [
            "Ki·∫øn th·ª©c n·ªÅn t·∫£ng & An to√†n",
            "L√¢m s√†ng c∆° b·∫£n & Quy tr√¨nh",
            "ƒê·∫°o ƒë·ª©c y khoa & Giao ti·∫øp b·ªánh nh√¢n"
        ],
        "S∆∞ ph·∫°m": [
            "T√¢m l√Ω h·ªçc gi√°o d·ª•c & ƒê·ªông l·ª±c",
            "Thi·∫øt k·∫ø b√†i gi·∫£ng & ƒê√°nh gi√°",
            "Qu·∫£n l√Ω l·ªõp h·ªçc & Giao ti·∫øp"
        ],
        "Ki·∫øn tr√∫c": [
            "T∆∞ duy th·∫©m m·ªπ & H√¨nh kh·ªëi",
            "C√¥ng nƒÉng & B·ªÅn v·ªØng",
            "L·ªãch s·ª≠ ki·∫øn tr√∫c & B·ªëi c·∫£nh"
        ],
        "Du l·ªãch & Nh√† h√†ng - Kh√°ch s·∫°n": [
            "D·ªãch v·ª• kh√°ch h√†ng & Quy tr√¨nh",
            "VƒÉn ho√° ‚Äì ƒëi·ªÉm ƒë·∫øn & L·ªãch tr√¨nh",
            "An to√†n, v·ªá sinh & X·ª≠ l√Ω t√¨nh hu·ªëng"
        ],
        "T√¢m l√Ω h·ªçc": [
            "K·ªπ nƒÉng Th·∫•u hi·ªÉu & ƒê·ªìng c·∫£m",
            "K·ªπ nƒÉng Ph√¢n t√≠ch & ƒê√°nh gi√°",
            "K·ªπ nƒÉng ƒê·∫°o ƒë·ª©c & Gi·ªõi h·∫°n ngh·ªÅ nghi·ªáp"
        ]
    }

    # H√†m load test data t·ª´ file ri√™ng
    def load_test_data(major_name):
        """T·ª± ƒë·ªông import file test data cho chuy√™n ng√†nh"""
        try:
            # Map t√™n chuy√™n ng√†nh sang t√™n file th·ª±c t·∫ø
            file_mapping = {
                "C√¥ng ngh·ªá th√¥ng tin": "cong_nghe_thong_tin_tests",
                "Kinh t·∫ø": "kinh_te_tests", 
                "Marketing": "marketing_tests",
                "Ng√¥n ng·ªØ Anh": "ngon_ngu_anh_tests",
                "Lu·∫≠t": "luat_tests",
                "Y d∆∞·ª£c": "y_duoc_tests",
                "S∆∞ ph·∫°m": "su_pham_tests",
                "Ki·∫øn tr√∫c": "kien_truc_tests",
                "Du l·ªãch & Nh√† h√†ng - Kh√°ch s·∫°n": "du_lich_nha_hang_khach_san_tests",
                "T√¢m l√Ω h·ªçc": "tam_ly_hoc_tests"
            }
            
            if major_name not in file_mapping:
                print(f"‚ö†Ô∏è Kh√¥ng c√≥ mapping cho: {major_name}")
                return {}
                
            module_name = file_mapping[major_name]
            print(f"üîç ƒêang t√¨m file: {module_name}")
            
            module = importlib.import_module(module_name)
            
            # T√¨m bi·∫øn ch·ª©a questions (th·ª≠ nhi·ªÅu t√™n kh√°c nhau)
            possible_names = [
                "questions",  # T√™n ƒë∆°n gi·∫£n nh·∫•t
                "cong_nghe_thong_tin_questions",  # Cho CNTT
                "kinh_te_questions",  # Cho Kinh t·∫ø
                "marketing_questions",  # Cho Marketing
                "ngon_ngu_anh_questions",  # Cho Ng√¥n ng·ªØ Anh
                "luat_questions",  # Cho Lu·∫≠t
                "y_duoc_questions",  # Cho Y d∆∞·ª£c
                "su_pham_questions",  # Cho S∆∞ ph·∫°m
                "kien_truc_questions",  # Cho Ki·∫øn tr√∫c
                "du_lich_nha_hang_khach_san_questions",  # Cho Du l·ªãch
                "tam_ly_hoc_questions",  # Cho T√¢m l√Ω h·ªçc
            ]
            
            for name in possible_names:
                if hasattr(module, name):
                    print(f"‚úÖ T√¨m th·∫•y bi·∫øn: {name} trong {module_name}")
                    return getattr(module, name)
            
            print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y bi·∫øn questions trong {module_name}")
            return {}
            
        except ImportError as e:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ import {module_name}: {e}")
            return {}
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi load test data cho {major_name}: {e}")
            return {}

    # Load test data cho t·∫•t c·∫£ chuy√™n ng√†nh
    test_data_cache = {}
    for major_name, _ in majors:
        test_data_cache[major_name] = load_test_data(major_name)
        if test_data_cache[major_name]:
            print(f"‚úÖ ƒê√£ load test data cho: {major_name}")

    # M·∫´u c√¢u h·ªèi theo chuy√™n ng√†nh (d·ª± ph√≤ng)
    def make_question_fallback(major, test_title, i):
        base = i % 5
        if major == "C√¥ng ngh·ªá th√¥ng tin":
            stems = [
                f"Trong b·ªëi c·∫£nh d·ª± √°n ph·∫ßn m·ªÅm, b∆∞·ªõc ph√π h·ª£p nh·∫•t ·ªü v·ªã tr√≠ {i} l√† g√¨?",
                f"Khi g·∫∑p l·ªói ph√°t sinh ·ªü m√¥i tr∆∞·ªùng staging, h√†nh ƒë·ªông ∆∞u ti√™n c·ªßa b·∫°n l√† g√¨?",
                f"ƒê·ªÉ n√¢ng cao ch·∫•t l∆∞·ª£ng m√£, th·ª±c h√†nh n√†o n√™n √°p d·ª•ng tr∆∞·ªõc?",
                f"Trong bu·ªïi h·ªçp sprint review, b·∫°n c·∫ßn t·∫≠p trung ƒëi·ªÅu g√¨?",
                f"Khi ∆∞·ªõc l∆∞·ª£ng task, y·∫øu t·ªë n√†o kh√¥ng n√™n b·ªè qua?",
            ]
            options = [
                ("Vi·∫øt th√™m t√≠nh nƒÉng ngay", "T√°i hi·ªán v√† c√¥ l·∫≠p l·ªói", "B·ªè qua v√† deploy", "Ch·ªù ng∆∞·ªùi kh√°c s·ª≠a"),
                ("Code review 4 m·∫Øt", "Kh√¥ng vi·∫øt test", "B·ªè qua t√†i li·ªáu", "Tr√¨ ho√£n merge"),
                ("Ch·∫•t l∆∞·ª£ng ƒë·∫ßu ra", "C·∫£m x√∫c c√° nh√¢n", "May r·ªßi", "S·ªü th√≠ch c√¥ng ngh·ªá"),
                ("Ti√™u ch√≠ ho√†n th√†nh (DoD)", "T√°m chuy·ªán", "Tr√¨nh b√†y d√†i d√≤ng", "Tr√°nh ph·∫£n h·ªìi"),
                ("R·ªßi ro k·ªπ thu·∫≠t", "ƒê·ªïi ng√¥n ng·ªØ l·∫≠p tr√¨nh", "Mua th√™m server", "Like tr√™n m·∫°ng")
            ]
        elif major == "Kinh t·∫ø":
            stems = [
                f"Khi ph√¢n t√≠ch th·ªã tr∆∞·ªùng, ch·ªâ s·ªë n√†o h·ªØu √≠ch ·ªü v·ªã tr√≠ {i}?",
                f"Trong ƒë√°nh gi√° d·ª± √°n, ƒëi·ªÅu g√¨ ph·∫£n √°nh r·ªßi ro t·ªët nh·∫•t?",
                f"ƒê·ªì th·ªã n√†o ph√π h·ª£p ƒë·ªÉ so s√°nh nh√≥m d·ªØ li·ªáu?",
                f"ƒê·ªÉ tr√¨nh b√†y cho l√£nh ƒë·∫°o, tr·ªçng t√¢m l√† g√¨?",
                f"Khi d·ª± b√°o sai l·ªách, b∆∞·ªõc ki·ªÉm tra ƒë·∫ßu ti√™n l√† g√¨?",
            ]
            options = [
                ("Doanh s·ªë, bi√™n l·ª£i nhu·∫≠n", "M√†u logo", "T√™n c√¥ng ty", "Meme ƒëang hot"),
                ("Ph√¢n t√≠ch ƒë·ªô nh·∫°y", "Ch·ªçn theo c·∫£m t√≠nh", "Tin ƒë·ªìn", "ƒê·∫øm like"),
                ("Bi·ªÉu ƒë·ªì c·ªôt", "Bi·ªÉu ƒë·ªì tr√≤n", "·∫¢nh minh ho·∫°", "ƒêo·∫°n vƒÉn"),
                ("C√¢u chuy·ªán d·ªØ li·ªáu & khuy·∫øn ngh·ªã", "Slide nhi·ªÅu ch·ªØ", "Thu·∫≠t ng·ªØ kh√≥", "·∫¢nh ƒë·ªông"),
                ("Ki·ªÉm tra gi·∫£ ƒë·ªãnh & d·ªØ li·ªáu", "ƒê·ªïi ph·∫ßn m·ªÅm", "ƒêo√°n l·∫°i", "B·ªè qua l·ªói")
            ]
        elif major == "Marketing":
            stems = [
                f"Th√¥ng ƒëi·ªáp c·ªët l√µi cho chi·∫øn d·ªãch ·ªü v·ªã tr√≠ {i} n√™n t·∫≠p trung v√†o g√¨?",
                f"ƒê·ªÉ t√¨m insight kh√°ch h√†ng, b·∫°n ∆∞u ti√™n ngu·ªìn n√†o?",
                f"·ªû giai ƒëo·∫°n tri·ªÉn khai, ch·ªâ s·ªë n√†o quan tr·ªçng nh·∫•t?",
                f"Khi ph·ªëi h·ª£p k√™nh, nguy√™n t·∫Øc n√†o t·ªëi ∆∞u?",
                f"C√°ch t·ªët nh·∫•t ƒë·ªÉ th·ª≠ nghi·ªám √Ω t∆∞·ªüng n·ªôi dung?",
            ]
            options = [
                ("L·ª£i √≠ch cho kh√°ch h√†ng", "T√≠nh nƒÉng n·ªôi b·ªô", "L·ªãch s·ª≠ c√¥ng ty", "Kh·∫©u hi·ªáu d√†i"),
                ("Nghi√™n c·ª©u ƒë·ªãnh t√≠nh/ƒë·ªãnh l∆∞·ª£ng", "Tin ƒë·ªìn", "M·ªôt b√†i vi·∫øt l·∫ª", "√ù ki·∫øn ch·ªß quan"),
                ("M·ª•c ti√™u/KPI ƒë√£ ƒë·ªãnh", "S·ªë slide", "S·ªë hashtag", "ƒê·ªô d√†i caption"),
                ("Nh·∫•t qu√°n th√¥ng ƒëi·ªáp", "Thay ƒë·ªïi li√™n t·ª•c", "Ng·∫´u h·ª©ng", "Ch·∫°y ƒë∆°n l·∫ª"),
                ("A/B testing c√≥ ki·ªÉm so√°t", "ƒêƒÉng tu·ª≥ h·ª©ng", "Spam b√†i", "ƒê·ªïi brand voice")
            ]
        elif major == "Ng√¥n ng·ªØ Anh":
            stems = [
                f"Ch·ªçn t·ª´ ph√π h·ª£p nh·∫•t cho ng·ªØ c·∫£nh ·ªü v·ªã tr√≠ {i}.",
                f"C√°ch di·ªÖn ƒë·∫°t trang tr·ªçng n√™n d√πng trong email l√†?",
                f"Trong ƒë·ªçc hi·ªÉu, ƒëi·ªÅu g√¨ gi√∫p n·∫Øm √Ω ch√≠nh nhanh?",
                f"Khi vi·∫øt h·ªçc thu·∫≠t, y·∫øu t·ªë n√†o c·∫ßn ∆∞u ti√™n?",
                f"ƒê·ªÉ c·∫£i thi·ªán ph√°t √¢m, b·∫°n n√™n l√†m g√¨?",
            ]
            options = [
                ("Collocation t·ª± nhi√™n", "D·ªãch t·ª´ng ch·ªØ", "T·ª´ hi·∫øm g·∫∑p", "T·ª´ sai ng·ªØ c·∫£nh"),
                ("I would appreciate it if...", "Send me now", "Gimme", "Pls asap"),
                ("Skimming/Scanning", "ƒêo√°n m√≤", "ƒê·ªçc ng·∫´u nhi√™n", "B·ªè ti√™u ƒë·ªÅ"),
                ("M·∫°ch l·∫°c & tr√≠ch d·∫´n", "Emoji nhi·ªÅu", "Vi·∫øt t·∫Øt", "Thi·∫øu b·∫±ng ch·ª©ng"),
                ("Luy·ªán IPA & shadowing", "H·ªçc qua loa", "Ch·ªâ nghe nh·∫°c", "Kh√¥ng ghi √¢m")
            ]
        elif major == "Lu·∫≠t":
            stems = [
                f"Trong t√¨nh hu·ªëng {i}, vƒÉn b·∫£n n√†o c√≥ hi·ªáu l·ª±c ph√°p l√Ω cao h∆°n?",
                f"Khi l·∫≠p lu·∫≠n, ƒëi·ªÅu g√¨ gi√∫p thuy·∫øt ph·ª•c nh·∫•t?",
                f"Nh·∫≠n ƒë·ªãnh n√†o sau ƒë√¢y ph√π h·ª£p nguy√™n t·∫Øc suy ƒëo√°n v√¥ t·ªôi?",
                f"Khi xung ƒë·ªôt quy ph·∫°m, h∆∞·ªõng x·ª≠ l√Ω?",
                f"V·∫•n ƒë·ªÅ ƒë·∫°o ƒë·ª©c ngh·ªÅ lu·∫≠t c·∫ßn ∆∞u ti√™n?",
            ]
            options = [
                ("Lu·∫≠t/hi·∫øn ph√°p", "Blog c√° nh√¢n", "Tin ƒë·ªìn", "M·∫°ng x√£ h·ªôi"),
                ("D·∫´n chi·∫øu quy ph·∫°m & √°n l·ªá", "C·∫£m x√∫c", "Uy t√≠n c√° nh√¢n", "S·ªë trang vƒÉn b·∫£n"),
                ("B·ªã c√°o kh√¥ng ph·∫£i ch·ª©ng minh v√¥ t·ªôi", "B·∫Øt bu·ªôc nh·∫≠n t·ªôi", "Kh√¥ng c·∫ßn x√©t x·ª≠", "D·ª±a v√†o d∆∞ lu·∫≠n"),
                ("√Åp d·ª•ng vƒÉn b·∫£n hi·ªáu l·ª±c cao/h·∫πp h∆°n", "B·ªè qua h·∫øt", "Theo √Ω ki·∫øn c√° nh√¢n", "B·ªëc thƒÉm"),
                ("B·∫£o m·∫≠t & xung ƒë·ªôt l·ª£i √≠ch", "Qu·∫£ng c√°o qu√° m·ª©c", "L√°ch lu·∫≠t", "T·∫∑ng qu√† tr√°i ph√©p")
            ]
        elif major == "Y d∆∞·ª£c":
            stems = [
                f"Quy t·∫Øc an to√†n c∆° b·∫£n khi thao t√°c ·ªü v·ªã tr√≠ {i} l√†?",
                f"V·ªõi b·ªánh s·ª≠ m∆° h·ªì, h√†nh ƒë·ªông n√†o ph√π h·ª£p?",
                f"Nguy√™n t·∫Øc d√πng thu·ªëc h·ª£p l√Ω l√† g√¨?",
                f"Trong giao ti·∫øp b·ªánh nh√¢n, ƒëi·ªÅu g√¨ c·∫ßn nh·∫•t?",
                f"ƒê·∫°o ƒë·ª©c y khoa y√™u c·∫ßu?",
            ]
            options = [
                ("R·ª≠a tay & v√¥ khu·∫©n", "B·ªè gƒÉng tay", "D√πng chung kim", "Kh√¥ng c·∫ßn kh·∫©u trang"),
                ("Khai th√°c th√™m & c·∫≠n l√¢m s√†ng", "ƒêo√°n b·ª´a", "K√™ ƒë∆°n ngay", "B·ªè qua"),
                ("ƒê√∫ng thu·ªëc ‚Äì li·ªÅu ‚Äì ƒë∆∞·ªùng ‚Äì th·ªùi gian", "Tu·ª≥ c·∫£m t√≠nh", "Theo qu·∫£ng c√°o", "Theo l·ªùi ƒë·ªìn"),
                ("L·∫Øng nghe & ƒë·ªìng c·∫£m", "V·ªôi v√†ng", "Tr√°nh gi·∫£i th√≠ch", "D·ªça n·∫°t"),
                ("∆Øu ti√™n an to√†n ng∆∞·ªùi b·ªánh", "B√≠ m·∫≠t h·ªì s∆°", "Nh·∫≠n qu√†", "B√°n thu·ªëc √©p bu·ªôc")
            ]
        elif major == "S∆∞ ph·∫°m":
            stems = [
                f"ƒê·ªông l·ª±c h·ªçc t·∫≠p ƒë∆∞·ª£c tƒÉng b·∫±ng c√°ch n√†o ·ªü v·ªã tr√≠ {i}?",
                f"Khi thi·∫øt k·∫ø ƒë√°nh gi√°, ƒëi·ªÅu g√¨ quan tr·ªçng nh·∫•t?",
                f"Qu·∫£n l√Ω l·ªõp h·ªçc hi·ªáu qu·∫£ nh·ªù?",
                f"H·ªó tr·ª£ h·ªçc sinh y·∫øu c·∫ßn?",
                f"Giao ti·∫øp v·ªõi ph·ª• huynh n√™n?",
            ]
            options = [
                ("M·ª•c ti√™u r√µ & ph·∫£n h·ªìi", "Ph·∫°t n·∫∑ng", "B√†i t·∫≠p v√¥ h·∫°n", "Kh√¥ng gi·∫£i th√≠ch"),
                ("Ph√π h·ª£p m·ª•c ti√™u & rubrics", "Ch·ªâ thi cu·ªëi k·ª≥", "ƒêi·ªÉm tu·ª≥ h·ª©ng", "ƒê·ªÅ m∆° h·ªì"),
                ("N·ªôi quy nh·∫•t qu√°n", "Ph·ªõt l·ªù", "N·ªïi n√≥ng", "Ch·ªß quan"),
                ("K·∫ø ho·∫°ch c√° nh√¢n ho√°", "B·ªè m·∫∑c", "Ch√™ bai", "TƒÉng b√†i v√¥ l√Ω"),
                ("T√¥n tr·ªçng & h·ª£p t√°c", "ƒê·ªï l·ªói", "M·∫≠p m·ªù", "Tr√°nh li√™n h·ªá")
            ]
        elif major == "Ki·∫øn tr√∫c":
            stems = [
                f"Nguy√™n t·∫Øc th·∫©m m·ªπ c∆° b·∫£n √°p d·ª•ng ·ªü v·ªã tr√≠ {i}?",
                f"ƒê·∫£m b·∫£o c√¥ng nƒÉng kh√¥ng gian nh·ªù?",
                f"Y·∫øu t·ªë b·ªÅn v·ªØng ∆∞u ti√™n l√†?",
                f"B·ªë c·ª•c t·ªïng th·ªÉ n√™n ch√∫ √Ω?",
                f"·∫¢nh h∆∞·ªüng b·ªëi c·∫£nh l·ªãch s·ª≠ gi√∫p?",
            ]
            options = [
                ("C√¢n b·∫±ng ‚Äì nh·ªãp ƒëi·ªáu ‚Äì t∆∞∆°ng ph·∫£n", "T√≠ch th·∫≠t nhi·ªÅu chi ti·∫øt", "M√†u ng·∫´u h·ª©ng", "Kh√¥ng c·∫ßn t·ªâ l·ªá"),
                ("Kh·∫£o s√°t nhu c·∫ßu s·ª≠ d·ª•ng", "Theo √Ω th√≠ch", "Gi·∫£m l·ªëi ƒëi", "B·ªè th√¥ng gi√≥"),
                ("V·∫≠t li·ªáu & nƒÉng l∆∞·ª£ng", "S∆°n nhi·ªÅu l·ªõp", "K√≠nh to√†n b·ªô", "Kh√¥ng c√°ch nhi·ªát"),
                ("Tr·ª•c ‚Äì ƒëi·ªÉm nh·∫•n ‚Äì d√≤ng ch·∫£y", "T√πy ti·ªán", "B·ªãt k√≠n", "C·∫Øt v·ª•n"),
                ("T·∫°o b·∫£n s·∫Øc & ph√π h·ª£p", "Sao ch√©p v√¥ t·ªôi v·∫°", "B·ªè qua vƒÉn ho√°", "Ng·∫´u h·ª©ng")
            ]
        elif major == "Du l·ªãch & Nh√† h√†ng - Kh√°ch s·∫°n":
            stems = [
                f"Chu·∫©n d·ªãch v·ª• c∆° b·∫£n v·ªõi kh√°ch ·ªü v·ªã tr√≠ {i}?",
                f"L·∫≠p l·ªãch tr√¨nh tour c·∫ßn ∆∞u ti√™n?",
                f"An to√†n & v·ªá sinh y√™u c·∫ßu?",
                f"X·ª≠ l√Ω ph√†n n√†n hi·ªáu qu·∫£ b·∫±ng?",
                f"Giao ti·∫øp ƒëa vƒÉn ho√° n√™n?",
            ]
            options = [
                ("Ch√†o h·ªèi ‚Äì l·∫Øng nghe ‚Äì h·ªó tr·ª£", "Ph·ªõt l·ªù", "Tranh c√£i", "ƒê√πn ƒë·∫©y"),
                ("C√¢n ƒë·ªëi th·ªùi gian & tr·∫£i nghi·ªám", "Nh·ªìi nh√©t ƒëi·ªÉm ƒë·∫øn", "B·ªè th·ªùi gian ngh·ªâ", "Kh√¥ng ki·ªÉm tra ƒë∆∞·ªùng"),
                ("Quy tr√¨nh & ti√™u chu·∫©n", "L√†m theo c·∫£m t√≠nh", "Gi·∫£m b∆∞·ªõc", "B·ªè s√°t khu·∫©n"),
                ("Xin l·ªói ‚Äì gi·∫£i ph√°p ‚Äì theo d√µi", "ƒê·ªï l·ªói", "B·ªè qua", "Ch·ªù kh√°ch t·ª± h·∫øt gi·∫≠n"),
                ("T√¥n tr·ªçng kh√°c bi·ªát", "√Åp ƒë·∫∑t", "ƒê√πa qu√° tr·ªõn", "Ng√¥n ng·ªØ kh√≥")
            ]
        elif major == "T√¢m l√Ω h·ªçc":
            stems = [
                f"Kh√°i ni·ªám n·ªÅn t·∫£ng ph√π h·ª£p ·ªü v·ªã tr√≠ {i}?",
                f"Trong ƒë√°nh gi√°, c·∫ßn ch√∫ tr·ªçng?",
                f"Li√™n h·ªá gi·ªØa h√†nh vi & nh·∫≠n th·ª©c?",
                f"Th·ª±c h√†nh ƒë·∫°o ƒë·ª©c y√™u c·∫ßu?",
                f"K·ªπ nƒÉng tham v·∫•n quan tr·ªçng?",
            ]
            options = [
                ("ƒêi·ªÅu ki·ªán ho√° ‚Äì c·ªßng c·ªë", "Ti√™n tri", "M√™ t√≠n", "Suy ƒëo√°n v√¥ cƒÉn"),
                ("ƒê·ªô tin c·∫≠y ‚Äì gi√° tr·ªã ƒëo", "·∫§n t∆∞·ª£ng", "ƒêo√°n √Ω", "S·ªë c√¢u h·ªèi √≠t"),
                ("·∫¢nh h∆∞·ªüng hai chi·ªÅu", "M·ªôt chi·ªÅu", "Kh√¥ng li√™n h·ªá", "Ng·∫´u nhi√™n"),
                ("B·∫£o m·∫≠t ‚Äì ƒë·ªìng √Ω tham gia", "Chia s·∫ª t·ª± do", "√âp bu·ªôc", "B·ªè ghi ch√©p"),
                ("L·∫Øng nghe ch·ªß ƒë·ªông", "C·∫Øt l·ªùi", "ƒê√°nh gi√° ph√°n x√©t", "√Åp ƒë·∫∑t gi·∫£i ph√°p")
            ]
        else:
            stems = [f"C√¢u h·ªèi t·ªïng qu√°t s·ªë {i}", f"N·ªôi dung t√¨nh hu·ªëng s·ªë {i}", f"Kh√°i ni·ªám li√™n quan s·ªë {i}", f"·ª®ng d·ª•ng th·ª±c ti·ªÖn s·ªë {i}", f"Nh·∫≠n ƒë·ªãnh ƒë√∫ng sai s·ªë {i}"]
            options = [("A", "B", "C", "D")] * 5

        stem = stems[base]
        A, B, C, D = options[base]
        return stem, A, B, C, D

    # ƒê√°p √°n ƒë√∫ng theo chu k·ª≥ A‚ÜíB‚ÜíC‚ÜíD l·∫∑p l·∫°i
    def correct_letter(i):
        return "ABCD"[(i - 1) % 4]

    # Xo√° d·ªØ li·ªáu c≈©
    Question.objects.all().delete()
    Test.objects.all().delete()
    Major.objects.all().delete()

    # T·∫°o majors
    major_objs = {}
    for name, desc in majors:
        major_objs[name] = Major.objects.create(name=name, description=desc)

    # T·∫°o 3 b√†i test √ó 30 c√¢u cho m·ªói chuy√™n ng√†nh
    for major_name, _ in majors:
        titles = test_titles_by_major[major_name]
        for t_index, t_title in enumerate(titles, start=1):
            test = Test.objects.create(
                title=f"{major_name} - {t_title}",
                major=major_objs[major_name],
                num_questions=30
            )
            
            # Ki·ªÉm tra xem c√≥ test data t·ª´ file kh√¥ng
            has_custom_data = (major_name in test_data_cache and 
                             test_data_cache[major_name] and 
                             t_title in test_data_cache[major_name])
            
            if has_custom_data:
                print(f"‚úÖ S·ª≠ d·ª•ng custom data cho: {major_name} - {t_title}")
            
            for i in range(1, 31):
                if has_custom_data:
                    # L·∫•y c√¢u h·ªèi t·ª´ file custom
                    questions_list = test_data_cache[major_name][t_title]
                    q_index = (i - 1) % len(questions_list)
                    q_data = questions_list[q_index]
                    stem = q_data["text"]
                    A, B, C, D = q_data["options"]
                    correct = q_data["correct"]
                else:
                    # D√πng fallback
                    stem, A, B, C, D = make_question_fallback(major_name, t_title, i)
                    correct = correct_letter(i)
                
                Question.objects.create(
                    test=test,
                    text=stem,
                    option_a=A,
                    option_b=B,
                    option_c=C,
                    option_d=D,
                    correct_answer=correct
                )

    print("‚úÖ ƒê√£ t·∫°o 10 chuy√™n ng√†nh √ó 3 b√†i test √ó 30 c√¢u ho√†n t·∫•t!")