# testblock/views.py
from django.shortcuts import render, get_object_or_404, redirect
from django.http import JsonResponse
from django.contrib import messages
import os
import sys
import django
import importlib.util
import json
from django.conf import settings

# Setup Django
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(BASE_DIR)
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'FinalProject.settings')
django.setup()

from .models import TestBlock, BlockQuestion, BlockTestResult, Subject, SubjectTestResult

# ========== C√ÅC H√ÄM H·ªñ TR·ª¢ ==========
def get_subject_name(subject_code):
    """L·∫•y t√™n m√¥n h·ªçc t·ª´ m√£ m√¥n"""
    name_mapping = {
        'A_TOAN': 'To√°n h·ªçc', 'A_LY': 'V·∫≠t l√Ω', 'A_HOA': 'H√≥a h·ªçc',
        'B_TOAN': 'To√°n h·ªçc', 'B_HOA': 'H√≥a h·ªçc', 'B_SINH': 'Sinh h·ªçc', 
        'C_VAN': 'Ng·ªØ vƒÉn', 'C_SU': 'L·ªãch s·ª≠', 'C_DIA': 'ƒê·ªãa l√Ω',
        'D_TOAN': 'To√°n h·ªçc', 'D_VAN': 'Ng·ªØ vƒÉn', 'D_TA': 'Ti·∫øng Anh',
        'A01_TOAN': 'To√°n h·ªçc', 'A01_LY': 'V·∫≠t l√Ω', 'A01_TA': 'Ti·∫øng Anh',
        'B01_TOAN': 'To√°n h·ªçc', 'B01_HOA': 'H√≥a h·ªçc', 'B01_TA': 'Ti·∫øng Anh',
        'D07_TOAN': 'To√°n h·ªçc', 'D07_HOA': 'H√≥a h·ªçc', 'D07_TA': 'Ti·∫øng Anh',
        'B02_TOAN': 'To√°n h·ªçc', 'B02_SINH': 'Sinh h·ªçc', 'B02_DIA': 'ƒê·ªãa l√Ω',
        'C01_VAN': 'Ng·ªØ vƒÉn', 'C01_TOAN': 'To√°n h·ªçc', 'C01_LY': 'V·∫≠t l√Ω',
        'D14_VAN': 'Ng·ªØ vƒÉn', 'D14_LS': 'L·ªãch s·ª≠', 'D14_TA': 'Ti·∫øng Anh',
        'D15_VAN': 'Ng·ªØ vƒÉn', 'D15_DIA': 'ƒê·ªãa l√Ω', 'D15_TA': 'Ti·∫øng Anh'
    }
    return name_mapping.get(subject_code, 'M√¥n h·ªçc')

# ========== C√ÅC VIEW CH√çNH ==========
def test_block_list(request):
    """Trang ch·ªß - Danh s√°ch kh·ªëi thi"""
    test_blocks = TestBlock.objects.all()
    return render(request, 'testblock/test_block_list.html', {
        'test_blocks': test_blocks,
        'title': 'Test Kh·ªëi Thi ƒê·∫°i H·ªçc'
    })

def subject_test_list(request, block_code):
    """Hi·ªÉn th·ªã danh s√°ch m√¥n h·ªçc theo kh·ªëi"""
    print(f"üéØ ƒêang hi·ªÉn th·ªã m√¥n h·ªçc kh·ªëi: {block_code}")
    
    blocks_data = {
        'khoi-A': {
            'name': 'Kh·ªëi A',
            'subjects': [
                {'code': 'A_TOAN', 'name': 'To√°n h·ªçc', 'description': 'ƒê·∫°i s·ªë, Gi·∫£i t√≠ch, H√¨nh h·ªçc', 'total_questions': 50, 'time_limit': 90},
                {'code': 'A_LY', 'name': 'V·∫≠t l√≠', 'description': 'C∆° h·ªçc, ƒêi·ªán t·ª≠, Quang h·ªçc', 'total_questions': 50, 'time_limit': 90},
                {'code': 'A_HOA', 'name': 'H√≥a h·ªçc', 'description': 'H√≥a v√¥ c∆°, H√≥a h·ªØu c∆°', 'total_questions': 50, 'time_limit': 90}
            ]
        },
        'khoi-B': {
            'name': 'Kh·ªëi B', 
            'subjects': [
                {'code': 'B_TOAN', 'name': 'To√°n h·ªçc', 'description': 'To√°n ph√¢n t√≠ch v√† th·ªëng k√™', 'total_questions': 50, 'time_limit': 90},
                {'code': 'B_HOA', 'name': 'H√≥a h·ªçc', 'description': 'H√≥a sinh v√† h√≥a ph√¢n t√≠ch', 'total_questions': 50, 'time_limit': 90},
                {'code': 'B_SINH', 'name': 'Sinh h·ªçc', 'description': 'Di truy·ªÅn, Sinh h·ªçc ph√¢n t·ª≠', 'total_questions': 50, 'time_limit': 90}
            ]
        },
        'khoi-C': {
            'name': 'Kh·ªëi C',
            'subjects': [
                {'code': 'C_VAN', 'name': 'Ng·ªØ vƒÉn', 'description': 'VƒÉn h·ªçc v√† Ti·∫øng Vi·ªát', 'total_questions': 50, 'time_limit': 90},
                {'code': 'C_SU', 'name': 'L·ªãch s·ª≠', 'description': 'L·ªãch s·ª≠ Vi·ªát Nam v√† Th·∫ø gi·ªõi', 'total_questions': 50, 'time_limit': 90},
                {'code': 'C_DIA', 'name': 'ƒê·ªãa l√≠', 'description': 'ƒê·ªãa l√Ω t·ª± nhi√™n v√† kinh t·∫ø', 'total_questions': 50, 'time_limit': 90}
            ]
        },
        'khoi-D': {
            'name': 'Kh·ªëi D',
            'subjects': [
                {'code': 'D_TOAN', 'name': 'To√°n h·ªçc', 'description': 'To√°n t·ªïng h·ª£p', 'total_questions': 50, 'time_limit': 90},
                {'code': 'D_VAN', 'name': 'Ng·ªØ vƒÉn', 'description': 'VƒÉn h·ªçc v√† ng√¥n ng·ªØ', 'total_questions': 50, 'time_limit': 90},
                {'code': 'D_TA', 'name': 'Ti·∫øng Anh', 'description': 'Ti·∫øng Anh t·ªïng qu√°t', 'total_questions': 50, 'time_limit': 90}
            ]
        },
        'khoi-A01': {
            'name': 'Kh·ªëi A01',
            'subjects': [
                {'code': 'A01_TOAN', 'name': 'To√°n h·ªçc', 'description': 'To√°n cao c·∫•p v√† ·ª©ng d·ª•ng', 'total_questions': 50, 'time_limit': 90},
                {'code': 'A01_LY', 'name': 'V·∫≠t l√≠', 'description': 'V·∫≠t l√Ω ƒë·∫°i c∆∞∆°ng v√† chuy√™n ng√†nh', 'total_questions': 50, 'time_limit': 90},
                {'code': 'A01_TA', 'name': 'Ti·∫øng Anh', 'description': 'Ti·∫øng Anh k·ªπ thu·∫≠t', 'total_questions': 50, 'time_limit': 90}
            ]
        },
        'khoi-B01': {
            'name': 'Kh·ªëi B01',
            'subjects': [
                {'code': 'B01_TOAN', 'name': 'To√°n h·ªçc', 'description': 'To√°n cao c·∫•p v√† ·ª©ng d·ª•ng', 'total_questions': 50, 'time_limit': 90},
                {'code': 'B01_HOA', 'name': 'H√≥a h·ªçc', 'description': 'H√≥a sinh v√† h√≥a ph√¢n t√≠ch', 'total_questions': 50, 'time_limit': 90},
                {'code': 'B01_TA', 'name': 'Ti·∫øng Anh', 'description': 'Ti·∫øng Anh k·ªπ thu·∫≠t', 'total_questions': 50, 'time_limit': 90}
            ]
        },
        'khoi-D07': {
            'name': 'Kh·ªëi D07',
            'subjects': [
                {'code': 'D07_TOAN', 'name': 'To√°n h·ªçc', 'description': 'To√°n cao c·∫•p v√† ·ª©ng d·ª•ng', 'total_questions': 50, 'time_limit': 90},
                {'code': 'D07_HOA', 'name': 'H√≥a h·ªçc', 'description': 'H√≥a sinh v√† h√≥a ph√¢n t√≠ch', 'total_questions': 50, 'time_limit': 90},
                {'code': 'D07_TA', 'name': 'Ti·∫øng Anh', 'description': 'Ti·∫øng Anh k·ªπ thu·∫≠t', 'total_questions': 50, 'time_limit': 90}
            ]
        },
        'khoi-B02': {
            'name': 'Kh·ªëi B02',
            'subjects': [
                {'code': 'B02_TOAN', 'name': 'To√°n h·ªçc', 'description': 'To√°n cao c·∫•p v√† ·ª©ng d·ª•ng', 'total_questions': 50, 'time_limit': 90},
                {'code': 'B02_SINH', 'name': 'Sinh h·ªçc', 'description': 'Sinh h·ªçc ph√¢n t·ª≠ v√† t·∫ø b√†o', 'total_questions': 50, 'time_limit': 90},
                {'code': 'B02_DIA', 'name': 'ƒê·ªãa l√Ω', 'description': 'ƒê·ªãa l√Ω t·ª± nhi√™n v√† kinh t·∫ø', 'total_questions': 50, 'time_limit': 90}
            ]
        },
        'khoi-C01': {
            'name': 'Kh·ªëi C01',
            'subjects': [
                {'code': 'C01_VAN', 'name': 'Ng·ªØ vƒÉn', 'description': 'VƒÉn h·ªçc v√† ng√¥n ng·ªØ', 'total_questions': 50, 'time_limit': 90},
                {'code': 'C01_TOAN', 'name': 'To√°n h·ªçc', 'description': 'To√°n cao c·∫•p v√† ·ª©ng d·ª•ng', 'total_questions': 50, 'time_limit': 90},
                {'code': 'C01_LY', 'name': 'V·∫≠t l√Ω', 'description': 'V·∫≠t l√Ω ƒë·∫°i c∆∞∆°ng v√† ·ª©ng d·ª•ng', 'total_questions': 50, 'time_limit': 90}
            ]
        },
        'khoi-D14': {
            'name': 'Kh·ªëi D14',
            'subjects': [
                {'code': 'D14_VAN', 'name': 'Ng·ªØ vƒÉn', 'description': 'VƒÉn h·ªçc v√† ng√¥n ng·ªØ', 'total_questions': 50, 'time_limit': 90},
                {'code': 'D14_LS', 'name': 'L·ªãch s·ª≠', 'description': 'L·ªãch s·ª≠ Vi·ªát Nam v√† th·∫ø gi·ªõi', 'total_questions': 50, 'time_limit': 90},
                {'code': 'D14_TA', 'name': 'Ti·∫øng Anh', 'description': 'Ti·∫øng Anh k·ªπ thu·∫≠t', 'total_questions': 50, 'time_limit': 90}
            ]
        },
        'khoi-D15': {
            'name': 'Kh·ªëi D15',
            'subjects': [
                {'code': 'D15_VAN', 'name': 'Ng·ªØ vƒÉn', 'description': 'VƒÉn h·ªçc v√† ng√¥n ng·ªØ', 'total_questions': 50, 'time_limit': 90},
                {'code': 'D15_DIA', 'name': 'ƒê·ªãa l√Ω', 'description': 'ƒê·ªãa l√Ω t·ª± nhi√™n v√† kinh t·∫ø', 'total_questions': 50, 'time_limit': 90},
                {'code': 'D15_TA', 'name': 'Ti·∫øng Anh', 'description': 'Ti·∫øng Anh k·ªπ thu·∫≠t', 'total_questions': 50, 'time_limit': 90}
            ]
        }
    }
    
    block_info = blocks_data.get(block_code)
    if not block_info:
        return render(request, 'testblock/error.html', {'message': 'Kh·ªëi kh√¥ng t·ªìn t·∫°i'})
    
    return render(request, 'testblock/subject_test_list.html', {
        'block_code': block_code,
        'block_info': block_info
    })

def start_subject_test(request, block_code, subject_code):
    """B·∫Øt ƒë·∫ßu l√†m b√†i test m√¥n h·ªçc - CH·ªà S·ª¨ D·ª§NG DATABASE"""
    print(f"üöÄ B·∫Øt ƒë·∫ßu l√†m b√†i: {block_code}/{subject_code}")
    subject_code = subject_code.upper()
    print(f"üîç ƒêang t√¨m m√¥n h·ªçc v·ªõi code: {subject_code}")
    # DEBUG: Ki·ªÉm tra database
    print("=== DEBUG DATABASE ===")
    print(f"Subject c√≥ trong DB: {[s.code for s in Subject.objects.all()]}")
    print(f"T·ªïng s·ªë c√¢u h·ªèi: {BlockQuestion.objects.count()}")
    
    try:
        print(f"üîç ƒêang t√¨m m√¥n h·ªçc v·ªõi code: {subject_code}")
        subject_obj = Subject.objects.get(code=subject_code)
        print(f"‚úÖ T√¨m th·∫•y m√¥n h·ªçc: {subject_obj.name} (code: {subject_obj.code})")
        
        # L·∫•y t·∫•t c·∫£ c√¢u h·ªèi t·ª´ database
        db_questions = BlockQuestion.objects.filter(subject=subject_obj)
        print(f"üîç S·ªë c√¢u h·ªèi t√¨m th·∫•y: {db_questions.count()}")
        
        if db_questions.exists():
            print(f"‚úÖ L·∫•y {db_questions.count()} c√¢u h·ªèi t·ª´ database cho {subject_obj.name}")
            all_questions = []
            for q in db_questions:
                all_questions.append({
                    'id': q.id,
                    'question_text': q.text,
                    'options': [
                        f"A. {q.option_a}",
                        f"B. {q.option_b}",
                        f"C. {q.option_c}",
                        f"D. {q.option_d}"
                    ],
                    'correct_answer': q.correct_answer,
                    'explanation': ''
                })

            subject_name = subject_obj.name
            total_questions = len(all_questions)
            time_limit = 90
            print(f"‚úÖ ƒê√£ t·∫°o {total_questions} c√¢u h·ªèi t·ª´ database")

        else:
            print(f"‚ùå KH√îNG C√ì C√ÇU H·ªéI TRONG DATABASE cho {subject_code}")
            return render(request, 'testblock/error.html', {
                'message': f'Kh√¥ng c√≥ c√¢u h·ªèi n√†o cho m√¥n h·ªçc {subject_code}. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.'
            })

    except Subject.DoesNotExist:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y m√¥n h·ªçc trong database: {subject_code}")
        return render(request, 'testblock/error.html', {
            'message': f'M√¥n h·ªçc {subject_code} kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng.'
        })

    print(f"üìä S·ªë c√¢u h·ªèi: {total_questions}, Th·ªùi gian: {time_limit} ph√∫t")
    
    # Truy·ªÅn d·ªØ li·ªáu cho template
    return render(request, "testblock/subject_test_infor.html", {
        "subject_code": subject_code,
        "block_code": block_code,
        "subject_name": subject_name,
        "total_questions": total_questions,
        "time_limit": time_limit,
        "questions": all_questions,
    })

def submit_subject_test(request, block_code, subject_code):
    """X·ª≠ l√Ω k·∫øt qu·∫£ b√†i test m√¥n h·ªçc - FIXED VERSION"""
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            user_answers = data.get('answers', {})
            time_taken = data.get('time_taken', 0)
            user_name = data.get('user_name', 'Th√≠ sinh')
            
            print(f"üìù N·ªôp b√†i m√¥n: {subject_code} trong kh·ªëi {block_code}")
            print(f"üìù S·ªë c√¢u tr·∫£ l·ªùi: {len(user_answers)}")
            
            # CHUY·ªÇN SUBJECT_CODE SANG CH·ªÆ HOA
            subject_code = subject_code.upper()
            
            # L·∫§Y C√ÇU H·ªéI T·ª™ DATABASE
            try:
                subject_obj = Subject.objects.get(code=subject_code)
                db_questions = BlockQuestion.objects.filter(subject=subject_obj)
                
                if not db_questions.exists():
                    raise Exception("Kh√¥ng c√≥ c√¢u h·ªèi trong database")
                    
                print(f"‚úÖ Ch·∫•m ƒëi·ªÉm v·ªõi {db_questions.count()} c√¢u h·ªèi t·ª´ database")
                test_questions = []
                for q in db_questions:
                    test_questions.append({
                        'id': q.id,
                        'question_text': q.text,
                        'options': [
                            f"A. {q.option_a}",
                            f"B. {q.option_b}", 
                            f"C. {q.option_c}",
                            f"D. {q.option_d}"
                        ],
                        'correct_answer': q.correct_answer,
                        'explanation': ''
                    })
                    
            except Exception as e:
                print(f"‚ùå L·ªói khi l·∫•y c√¢u h·ªèi t·ª´ database: {e}")
                return JsonResponse({
                    'success': False, 
                    'error': 'Kh√¥ng th·ªÉ l·∫•y c√¢u h·ªèi t·ª´ h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i sau.'
                }, status=400)
            
            # CH·∫§M ƒêI·ªÇM
            correct_count = 0
            question_details = []
            
            print(f"üîç B·∫Øt ƒë·∫ßu ch·∫•m ƒëi·ªÉm v·ªõi {len(test_questions)} c√¢u h·ªèi")
            
            for q_key, user_answer in user_answers.items():
                try:
                    # L·∫•y index t·ª´ key (v√≠ d·ª•: "question_0" -> 0)
                    question_index = int(q_key.replace('question_', ''))
                    if 0 <= question_index < len(test_questions):
                        question = test_questions[question_index]
                        correct_answer = question.get('correct_answer')
                        is_correct = user_answer == correct_answer
                        
                        if is_correct:
                            correct_count += 1
                        
                        question_details.append({
                            'question_id': question.get('id'),
                            'question_text': question.get('question_text', ''),
                            'user_answer': user_answer,
                            'correct_answer': correct_answer,
                            'is_correct': is_correct,
                            'explanation': question.get('explanation', ''),
                            'options': question.get('options', [])
                        })
                except (ValueError, KeyError) as e:
                    print(f"‚ö†Ô∏è L·ªói x·ª≠ l√Ω c√¢u h·ªèi {q_key}: {e}")
                    continue
            
            total_questions = len(test_questions)
            score = correct_count
            percentage = (correct_count / total_questions) * 100 if total_questions > 0 else 0
            
            print(f"üéØ K·∫øt qu·∫£: {score}/{total_questions} ({percentage:.1f}%)")
            
            # L∆ØU K·∫æT QU·∫¢
            try:
                result = SubjectTestResult.objects.create(
                    subject=subject_obj,
                    user_name=user_name,
                    score=score,
                    total_questions=total_questions,
                    percentage=percentage,
                    time_taken=time_taken,
                    question_details=json.dumps(question_details, ensure_ascii=False)
                )
                
                print(f"‚úÖ ƒê√£ l∆∞u k·∫øt qu·∫£: ID {result.id}")
                
                # FIX: Tr·∫£ v·ªÅ JSON v·ªõi redirect_url ƒë·ªÉ frontend chuy·ªÉn h∆∞·ªõng
                return JsonResponse({
                    'success': True,
                    'result_id': result.id,
                    'score': score,
                    'total_questions': total_questions,
                    'percentage': round(percentage, 2),
                    'correct_answers': correct_count,
                    'time_taken': time_taken,
                    'redirect_url': f'/test-khoi/ket-qua/{result.id}/',  # URL ƒë√∫ng v·ªõi pattern hi·ªán t·∫°i
                    'message': 'Ho√†n th√†nh b√†i test!'
                })
                
            except Exception as e:
                print(f"‚ùå L·ªói khi l∆∞u k·∫øt qu·∫£: {e}")
                return JsonResponse({
                    'success': False,
                    'error': 'L·ªói khi l∆∞u k·∫øt qu·∫£. Vui l√≤ng th·ª≠ l·∫°i.'
                }, status=500)
            
        except Exception as e:
            print(f"‚ùå L·ªói khi x·ª≠ l√Ω k·∫øt qu·∫£: {e}")
            import traceback
            print("Chi ti·∫øt l·ªói:", traceback.format_exc())
            return JsonResponse({'success': False, 'error': str(e)}, status=400)
    
    return JsonResponse({'success': False, 'error': 'Method not allowed'}, status=405)

def subject_test_result(request, result_id):
    """Hi·ªÉn th·ªã k·∫øt qu·∫£ b√†i test m√¥n h·ªçc - FIXED VERSION"""
    print(f"üéØ DEBUG: V√†o subject_test_result v·ªõi result_id = {result_id}")
    
    try:
        result = get_object_or_404(SubjectTestResult, id=result_id)
        print(f"üéØ DEBUG: T√¨m th·∫•y result - subject.code = {result.subject.code}")
        
        # X√°c ƒë·ªãnh block_code t·ª´ subject_code
        subject_code = result.subject.code
        if subject_code.startswith('A_'):
            block_code = 'khoi-A'
        elif subject_code.startswith('B_'):
            block_code = 'khoi-B' 
        elif subject_code.startswith('C_'):
            block_code = 'khoi-C'
        elif subject_code.startswith('D_'):
            block_code = 'khoi-D'
        elif subject_code.startswith('A01_'):
            block_code = 'khoi-A01'
        elif subject_code.startswith('B01_'):
            block_code = 'khoi-B01'
        elif subject_code.startswith('D07_'):
            block_code = 'khoi-D07'
        elif subject_code.startswith('B02_'):
            block_code = 'khoi-B02'
        elif subject_code.startswith('C01_'):
            block_code = 'khoi-C01'
        elif subject_code.startswith('D14_'):
            block_code = 'khoi-D14'
        elif subject_code.startswith('D15_'):
            block_code = 'khoi-D15'
        else:
            block_code = 'khoi-A'
        
        print(f"üéØ DEBUG: block_code = {block_code}")
        
        # Parse question_details t·ª´ JSON
        question_details = []
        if result.question_details:
            try:
                question_details = json.loads(result.question_details)
            except json.JSONDecodeError:
                question_details = []
        
        return render(request, 'testblock/subject_test_result.html', {
            'result': result,
            'question_details': question_details,
            'block_code': block_code,
            'title': f'K·∫øt qu·∫£ {result.subject.name}',
        })
        
    except Exception as e:
        print(f"‚ùå L·ªói khi hi·ªÉn th·ªã k·∫øt qu·∫£: {e}")
        import traceback
        traceback.print_exc()
        return render(request, 'testblock/error.html', {
            'message': 'Kh√¥ng th·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£'
        })

def test_block_detail(request, block_id):
    """Chi ti·∫øt kh·ªëi test"""
    test_block = get_object_or_404(TestBlock, id=block_id)
    questions = test_block.questions.all()
    
    if request.method == 'POST':
        score = 0
        total_questions = questions.count()
        user_answers = {}
        user_name = request.POST.get('user_name', '')
        
        for question in questions:
            user_answer = request.POST.get(f'question_{question.id}')
            user_answers[question.id] = user_answer
            
            if user_answer == question.correct_answer:
                score += 1
        
        percentage = (score / total_questions) * 100 if total_questions > 0 else 0
        suggested_majors = suggest_majors_for_block(test_block.name, percentage)
        
        result = BlockTestResult.objects.create(
            test_block=test_block,
            user_name=user_name,
            score=score,
            total_questions=total_questions,
            percentage=percentage,
            suggested_majors=", ".join(suggested_majors)
        )
        
        request.session['user_answers'] = user_answers
        request.session['result_id'] = result.id
        
        return redirect('testblock:test_block_result', result_id=result.id)
    
    return render(request, 'testblock/test_block_detail.html', {
        'test_block': test_block,
        'questions': questions
    })

def test_block_result(request, result_id):
    """K·∫øt qu·∫£ kh·ªëi test"""
    result = get_object_or_404(BlockTestResult, id=result_id)
    questions = result.test_block.questions.all()
    user_answers = request.session.get('user_answers', {})
    
    suggested_majors_list = result.suggested_majors.split(", ") if result.suggested_majors else []
    
    return render(request, 'testblock/test_block_result.html', {
        'result': result,
        'questions': questions,
        'user_answers': user_answers,
        'suggested_majors': suggested_majors_list,
        'title': f'K·∫øt qu·∫£ {result.test_block.name}'
    })

def test_block_result_detail(request, result_id):
    """Chi ti·∫øt k·∫øt qu·∫£ kh·ªëi test"""
    result = get_object_or_404(BlockTestResult, id=result_id)
    questions = result.test_block.questions.all()
    user_answers = request.session.get('user_answers', {})
    
    return render(request, 'testblock/test_block_result_detail.html', {
        'result': result,
        'questions': questions,
        'user_answers': user_answers,
        'title': f'Chi ti·∫øt k·∫øt qu·∫£ {result.test_block.name}'
    })

def suggest_majors_for_block(block_name, percentage):
    """G·ª£i √Ω ng√†nh h·ªçc d·ª±a tr√™n kh·ªëi v√† ƒëi·ªÉm s·ªë"""
    suggestions = {
        "Kh·ªëi A": [
            {"name": "C√¥ng ngh·ªá th√¥ng tin", "min_score": 70},
            {"name": "K·ªπ thu·∫≠t ƒëi·ªán", "min_score": 60},
            {"name": "C∆° kh√≠", "min_score": 50},
            {"name": "X√¢y d·ª±ng", "min_score": 40}
        ],
        "Kh·ªëi B": [
            {"name": "Y d∆∞·ª£c", "min_score": 75},
            {"name": "C√¥ng ngh·ªá sinh h·ªçc", "min_score": 65},
            {"name": "N√¥ng nghi·ªáp", "min_score": 55},
            {"name": "M√¥i tr∆∞·ªùng", "min_score": 45}
        ],
        "Kh·ªëi C": [
            {"name": "Lu·∫≠t", "min_score": 70},
            {"name": "B√°o ch√≠", "min_score": 60},
            {"name": "S∆∞ ph·∫°m", "min_score": 50},
            {"name": "Du l·ªãch", "min_score": 40}
        ],
        "Kh·ªëi D": [
            {"name": "Ng√¥n ng·ªØ Anh", "min_score": 65},
            {"name": "Marketing", "min_score": 55},
            {"name": "Quan h·ªá qu·ªëc t·∫ø", "min_score": 45},
            {"name": "T√¢m l√Ω h·ªçc", "min_score": 35}
        ]
    }
    
    suggested = []
    if block_name in suggestions:
        for major in suggestions[block_name]:
            if percentage >= major["min_score"]:
                suggested.append(major["name"])
    
    return suggested if suggested else ["C√°c ng√†nh ph√π h·ª£p v·ªõi kh·ªëi thi"]