# testblock/models.py
from django.db import models
from django.core.validators import MinValueValidator, MaxValueValidator

class TestBlock(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField(blank=True)
    num_questions = models.IntegerField(default=30, validators=[MinValueValidator(1)])
    
    def __str__(self):
        return self.name

class Subject(models.Model):
    SUBJECT_CHOICES = [
        ('A_TOAN', 'To√°n Kh·ªëi A'),
        ('A_LY', 'V·∫≠t L√Ω Kh·ªëi A'),
        ('A_HOA', 'H√≥a H·ªçc Kh·ªëi A'),
        ('B_TOAN', 'To√°n Kh·ªëi B'),
        ('B_HOA', 'H√≥a H·ªçc Kh·ªëi B'),
        ('B_SINH', 'Sinh H·ªçc Kh·ªëi B'),
        ('C_VAN', 'Ng·ªØ VƒÉn Kh·ªëi C'),
        ('C_SU', 'L·ªãch S·ª≠ Kh·ªëi C'),
        ('C_DIA', 'ƒê·ªãa L√Ω Kh·ªëi C'),
        ('D_TOAN', 'To√°n Kh·ªëi D'),
        ('D_VAN', 'Ng·ªØ VƒÉn Kh·ªëi D'),
        ('D_TA', 'Ti·∫øng Anh Kh·ªëi D'),
        ('A01_TOAN', 'To√°n Kh·ªëi A01'),
        ('A01_LY', 'V·∫≠t L√Ω Kh·ªëi A01'),
        ('A01_TA', 'Ti·∫øng Anh Kh·ªëi A01'),
        ('B01_TOAN', 'To√°n Kh·ªëi B01'),
        ('B01_HOA', 'H√≥a H·ªçc Kh·ªëi B01'),
        ('B01_TA', 'Ti·∫øng Anh Kh·ªëi B01'),
        ('D07_TOAN', 'To√°n Kh·ªëi D07'),
        ('D07_HOA', 'H√≥a H·ªçc Kh·ªëi D07'),
        ('D07_TA', 'Ti·∫øng Anh Kh·ªëi D07'),
        ('B02_TOAN', 'To√°n Kh·ªëi B02'),
        ('B02_SINH', 'Sinh H·ªçc Kh·ªëi B02'),
        ('B02_DIA', 'ƒê·ªãa L√Ω Kh·ªëi B02'),
        ('C01_VAN', 'Ng·ªØ VƒÉn Kh·ªëi C01'),
        ('C01_TOAN', 'To√°n Kh·ªëi C01'),
        ('C01_LY', 'V·∫≠t L√Ω Kh·ªëi C01'),
        ('D14_VAN', 'Ng·ªØ VƒÉn Kh·ªëi D14'),
        ('D14_LS', 'L·ªãch S·ª≠ Kh·ªëi D14'),
        ('D14_TA', 'Ti·∫øng Anh Kh·ªëi D14'),
        ('D15_VAN', 'Ng·ªØ VƒÉn Kh·ªëi D15'),
        ('D15_DIA', 'ƒê·ªãa L√Ω Kh·ªëi D15'),
        ('D15_TA', 'Ti·∫øng Anh Kh·ªëi D15')
    ]
    
    code = models.CharField(max_length=10, choices=SUBJECT_CHOICES, unique=True)
    name = models.CharField(max_length=100)
    description = models.TextField(blank=True)
    time_limit = models.IntegerField(default=90)
    total_questions = models.IntegerField(default=50)
    
    def __str__(self):
        return self.name

# üü¢ ƒê·ªîI T√äN BlQuestion TH√ÄNH BlockQuestion
class BlockQuestion(models.Model):
    subject = models.ForeignKey(Subject, on_delete=models.CASCADE, related_name='questions')
    test_block = models.ForeignKey(TestBlock, on_delete=models.CASCADE, related_name='questions')
    text = models.TextField()
    option_a = models.CharField(max_length=200)
    option_b = models.CharField(max_length=200)
    option_c = models.CharField(max_length=200)
    option_d = models.CharField(max_length=200)
    correct_answer = models.CharField(max_length=1, choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D')])
    
    def __str__(self):
        return f"{self.test_block.name} - {self.text[:50]}..."

class BlockTestResult(models.Model):
    test_block = models.ForeignKey(TestBlock, on_delete=models.CASCADE)
    user_name = models.CharField(max_length=100, blank=True)
    score = models.IntegerField(validators=[MinValueValidator(0)])
    total_questions = models.IntegerField(validators=[MinValueValidator(1)])
    percentage = models.FloatField(validators=[MinValueValidator(0), MaxValueValidator(100)])
    suggested_majors = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return f"{self.test_block.name} - {self.score}/{self.total_questions}"

class SubjectTestResult(models.Model):
    subject = models.ForeignKey(Subject, on_delete=models.CASCADE)
    user_name = models.CharField(max_length=100, blank=True)
    score = models.IntegerField(validators=[MinValueValidator(0)])
    total_questions = models.IntegerField(validators=[MinValueValidator(1)])
    percentage = models.FloatField(validators=[MinValueValidator(0), MaxValueValidator(100)])
    time_taken = models.IntegerField(default=0)
    question_details = models.TextField(blank=True)  # ‚úÖ TH√äM FIELD N√ÄY
    created_at = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return f"{self.subject.name} - {self.score}/{self.total_questions}"
# Th√™m v√†o models.py
class University(models.Model):
    name = models.CharField(max_length=200)
    code = models.CharField(max_length=20, unique=True)
    location = models.CharField(max_length=100)
    type = models.CharField(max_length=50, choices=[
        ('public', 'C√¥ng l·∫≠p'),
        ('private', 'T∆∞ th·ª•c')
    ])
    website = models.URLField(blank=True)
    
    def __str__(self):
        return self.name

class Major(models.Model):
    university = models.ForeignKey(University, on_delete=models.CASCADE, related_name='majors')
    name = models.CharField(max_length=200)
    code = models.CharField(max_length=20)
    block = models.CharField(max_length=10, choices=[
        ('A', 'Kh·ªëi A'), ('A1', 'Kh·ªëi A1'), 
        ('B', 'Kh·ªëi B'), ('C', 'Kh·ªëi C'),
        ('D', 'Kh·ªëi D'), ('OTHER', 'Kh·ªëi kh√°c')
    ])
    subject_1 = models.CharField(max_length=50)  # M√¥n 1
    subject_2 = models.CharField(max_length=50)  # M√¥n 2  
    subject_3 = models.CharField(max_length=50)  # M√¥n 3
    benchmark_2024 = models.FloatField()  # ƒêi·ªÉm chu·∫©n 2024
    admission_quota = models.IntegerField()  # Ch·ªâ ti√™u
    
    def __str__(self):
        return f"{self.name} - {self.university.name}"